{"version":3,"sources":["components/StoreCartBtn.js","components/StoreCategoryNames.js","components/StoreCategoryBtn.js","components/StoreHeader.js","components/StoreProduct.js","components/StoreProductBody.js","components/StoreCategoryBody.js","components/CartProduct.js","components/OrderForm.js","components/StoreCartBody.js","Store.js","serviceWorker.js","index.js"],"names":["StoreCart","className","onClick","this","props","showCart","React","Component","StoreCategoryOpt","storeSubCategoryOpt","showCategories","Storeheader","StoreCategoryBtn","StoreCategoryNames","StoreCartBtn","StoreProduct","addProductToCart","bind","addToCart","id","style","backgroundImage","title","price","StoreProductBody","Fragment","Categories","map","category","name","description","products","product","StoreCategoryBody","subcategories","subcategory","CartProduct","deleteFromCart","removeFromCart","setTotalPrice","key","OrderForm","custmerName","contactNo","submitOrder","getCustmerName","getContactNo","e","target","value","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","err","console","log","type","placeholder","onChange","Button","variant","color","StoreCartBody","cartProducts","forEach","parseInt","require","Store","state","isCategoryBtnClicked","isCartBtnClicked","productFromId","idArr","push","setState","filter","concat","StoreHeader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.667ed6ff.chunk.js","sourcesContent":["import React from 'react'\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\n\nclass StoreCart extends React.Component{\n\n    render(){\n        return(\n            <div \n            className='store-cart'\n            onClick = {\n                this.props.showCart\n            }\n            >\n                <ShoppingBasketIcon\n                className='cart-icon'/>\n                <p>Your Orders</p>\n            </div>\n        )\n    }\n}\n\nexport default StoreCart","import React from 'react'\n\nclass StoreCategoryOpt extends React.Component{\n    render(){\n        return(\n            <div className='store-category-opt'>\n                \n            </div>\n        )\n    }\n}\n\nexport default StoreCategoryOpt","import React from 'react'\nimport CategoryIcon from '@material-ui/icons/Category';\n\n\nclass storeSubCategoryOpt extends React.Component{\n    render(){\n        return(\n            <div className='store-subcategory-opt'\n            onClick={this.props.showCategories}>\n                <CategoryIcon\n                className='category-icon'/>\n                <p>Category</p>\n            </div>\n        )\n    }\n}\n\nexport default storeSubCategoryOpt","import React from 'react'\nimport StoreCartBtn from './StoreCartBtn'\nimport StoreCategoryNames from './StoreCategoryNames'\nimport StoreCategoryBtn from './StoreCategoryBtn'\n\n\nclass Storeheader extends React.Component{\n    render(){\n        return(\n            <header className='store-header'>\n                <StoreCategoryBtn\n                showCategories={this.props.showCategories}\n                />\n                <StoreCategoryNames/>\n                <StoreCartBtn\n                showCart = {this.props.showCart}\n                />\n            </header>\n        )\n    }\n}\n\n\nexport default Storeheader","import React from 'react'\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport TurnedInIcon from '@material-ui/icons/TurnedIn';\n\n\nclass StoreProduct extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.addProductToCart = this.addProductToCart.bind(this)\n    }\n\n    addProductToCart(){\n        this.props.addToCart(this.props.id)\n    }\n\n    render(){\n        return(\n            <div className='store-product'>\n                <div className='product-feature-thumbnail'\n                style = {{\n                backgroundImage:'url(https://res.cloudinary.com/practicaldev/image/fetch/s--GHW50y3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n4pe9m4y2wozonh9nsfx.png',\n            }}>\n                </div>\n                <div className='product-data'>\n                    <div className='product-title'>\n                        {this.props.title}\n                    </div>\n                    <div className='product-meta-data'>\n                        <div className='product-price'>\n                            <p>\n                                <span>$</span>\n                                {this.props.price}\n                            </p>\n                        </div>\n                        <div className='show-more-btn'>Show more</div>\n                        <div className='product-btns'>\n                            <div className='place-order-btn'>\n                                    <div\n                                    className = 'place-order'\n                                    >\n                                        <TurnedInIcon\n                                        className='place-order-icon'\n                                        />\n                                        <span>Order</span>\n                                    </div>\n                                </div>\n                            <div className='add-to-cart-btn'\n                            onClick = {this.addProductToCart}>\n                                <ShoppingCartIcon\n                                className='product-cart-icon'\n                                /> \n                            </div>\n                        </div>\n                    </div>\n                    <div className='product-hidden-data'></div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default StoreProduct","import React from 'react'\nimport StoreProduct from './StoreProduct'\n\n\nclass StoreProductBody extends React.Component{\n    render(){\n        return(\n            <React.Fragment>\n                {this.props.Categories.map((category)=>{\n                    return(\n                        <div>\n                            <p className='store-product-category'>\n                                {category.name}\n                            </p>\n                            <div className='product-category-data'>\n                                {category.description}\n                            </div>\n                            <div className='store-product-box'>\n                                {category.products.map((product)=>{\n                                    return(\n                                        <StoreProduct\n                                        price = {product.price}\n                                        title = {product.title}\n                                        id = {product.id}\n                                        addToCart = {this.props.addToCart}\n                                        />\n                                    )\n                                })}\n                            </div>\n                            <hr className = 'category-seperator'/>\n                        </div>\n                    )\n                })}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default StoreProductBody","import React from 'react'\n// import CancelIcon from '@material-ui/icons/Cancel';\n\nclass StoreCategoryBody extends React.Component{\n    render(){\n        return(\n            <div className='store-category-body'>\n                <ul className='category-list'>\n                {this.props.Categories.map((category)=>{\n                return (\n                    <li className='store-category-list'>\n                        <p>{category.name}</p>\n                        <ul>\n                            {category.subcategories.map((subcategory)=>{\n                            return <li className='store-subcategory-list'>{subcategory}</li>\n                            })}\n                        </ul>\n                    </li>\n                )})}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default StoreCategoryBody","import React from 'react'\nimport ClearIcon from '@material-ui/icons/Clear'\n\n\nclass CartProduct extends React.Component{\n    constructor(props){\n        super(props)\n        this.deleteFromCart = this.deleteFromCart.bind(this)\n    }\n\n\n    deleteFromCart(){\n        this.props.removeFromCart(this.props.id)\n        this.props.setTotalPrice()\n    }\n\n\n    render(){\n        return(\n            <tr key = {this.props.id}>\n                <td>\n                    {this.props.title}\n                </td>\n                <td>\n                    {this.props.price}\n                </td>\n                <td>\n                    <ClearIcon\n                    onClick = {this.deleteFromCart}/>\n                </td>\n            </tr>\n        )\n    }\n}\n\nexport default CartProduct","import React from 'react'\nimport {Button} from '@material-ui/core'\n\nclass OrderForm extends React.Component{\n    constructor(props){\n        super(props)\n        this.custmerName = ''\n        this.contactNo = ''\n        this.submitOrder = this.submitOrder.bind(this)\n        this.getCustmerName = this.getCustmerName.bind(this)\n        this.getContactNo = this.getContactNo.bind(this)\n    }\n\n\n    getCustmerName(e){\n        this.custmerName = e.target.value\n    }\n\n    getContactNo(e){\n        this.contactNo = e.target.value\n    }\n\n\n    submitOrder(){\n        fetch('/order',{\n            method:'POST',\n            headers:{\n                'content-type':'application/json'\n            },\n            body:JSON.stringify({\n                custmerName : this.custmerName,\n                contactNo : this.contactNo\n            })\n        })\n        .then(res => res.json)\n        .then(data => {\n            \n        })\n        .catch(err => console.log(err))\n    }\n\n    render(){\n        return(\n            <div className = 'order-form-wrapper'>\n                <div className='order-form'>\n                <div className='order-form-message'>\n                    Submit Your Order\n                </div>\n                <input \n                className='custmer-name order-input'\n                type = 'text'\n                placeholder = 'Your Name'\n                onChange = {this.getCustmerName}/>\n                <input \n                className='custmer-number order-input'\n                type = 'number'\n                placeholder = 'Contact No'\n                onChange = {this.getContactNo}/>\n                <div\n                className = 'order-btn-wrapper'>\n                    <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                    className = 'order-btn'\n                    onClick = {this.submitOrder}>\n                        Submit\n                    </Button>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default OrderForm","import React from 'react'\nimport CartProduct from './CartProduct'\nimport OrderForm from './OrderForm'\nimport AddIcon from '@material-ui/icons/Add'\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart'\n\n\nclass StoreCartBody extends React.Component{\n    constructor(props){\n        super(props)\n        this.setTotalPrice = this.setTotalPrice.bind(this)\n    }\n\n\n    setTotalPrice(){\n        let price = 0\n        this.props.cartProducts.forEach(product =>{\n            price += parseInt(product.price)\n        })\n        return price\n    }\n\n    render(){\n        return(\n            <div\n            className = 'store-cart-body'>\n                <div\n                className = 'store-cart-heading-wrapper'>\n                    <div\n                    className = 'store-cart-heading'>\n                    <span>\n                        <AddShoppingCartIcon\n                        className = 'store-cart-body-icon'\n                        />\n                    </span>\n                    Your Cart\n                    </div>\n                </div>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Product</th>\n                            <th>Price</th>\n                            <th>\n                                <AddIcon/>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.cartProducts.map((product) =>{\n                            return(\n                                <CartProduct\n                                title = {product.title}\n                                price = {product.price}\n                                id = {product.id}\n                                removeFromCart = {this.props.removeFromCart}\n                                setTotalPrice = {this.setTotalPrice}\n                                />\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <div\n                className = 'cart-final-details'>\n                    <div\n                    className = 'cart-total'\n                    >Total</div>\n                    <div\n                    className = 'cart-total-money'\n                    >\n                        <span>$</span>\n                        {this.setTotalPrice()}\n                    </div>\n                </div>\n                <OrderForm/>\n            </div>\n        )\n    }\n}\n\nexport default StoreCartBody","import React from 'react';\nimport './Store.css';\nimport StoreHeader from './components/StoreHeader'\nimport StoreProductBody from './components/StoreProductBody'\nimport StoreCategoryBody from './components/StoreCategoryBody'\nimport StoreCartBody from './components/StoreCartBody'\n\n\nconst Categories = require('./data/Categories.json')\n\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isCategoryBtnClicked: false,\n      isCartBtnClicked: false,\n      cartProducts: []\n    }\n\n\n    this.showCategories = this.showCategories.bind(this)\n    this.showCart = this.showCart.bind(this)\n    this.addToCart = this.addToCart.bind(this)\n    this.removeFromCart = this.removeFromCart.bind(this)\n    this.productFromId = this.productFromId.bind(this)\n\n\n  }\n\n\n  productFromId(idArr){\n    let products = []\n    Categories.forEach(category =>{\n      category.products.forEach(product =>{\n        idArr.forEach(id =>{\n          if(product.id == id){\n            products.push(product)\n          }\n        })\n      })\n    })\n    return products\n  }\n\n\n  removeFromCart(id){\n    this.setState({\n      cartProducts: this.state.cartProducts.filter(product => product.id !== id)\n    })\n  }\n\n\n  addToCart(id){\n    this.setState({\n      cartProducts: this.state.cartProducts.concat(this.productFromId([id]))\n    })\n  }\n\n\n  showCategories() {\n    this.setState({\n      isCategoryBtnClicked: !this.state.isCategoryBtnClicked\n    })\n  }\n\n\n  showCart() {\n    this.setState({\n      isCartBtnClicked: !this.state.isCartBtnClicked\n    })\n  }\n\n\n  render() {\n    if (this.state.isCategoryBtnClicked) {\n      return (\n        <React.Fragment>\n          <StoreCategoryBody\n            Categories={Categories}\n            showCategories={this.showCategories} />\n          <StoreHeader\n            showCategories={this.showCategories}\n            showCart={this.showCart}\n          />\n        </React.Fragment>\n      )\n    }\n    else if (this.state.isCartBtnClicked) {\n      return (\n        <React.Fragment>\n          <StoreCartBody\n            cartProducts = {this.state.cartProducts}\n            removeFromCart = {this.removeFromCart}\n          />\n          <StoreHeader\n            showCategories={this.showCategories}\n            showCart={this.showCart}\n          />\n        </React.Fragment>\n      )\n    }\n    else {\n      return (\n        <React.Fragment>\n          <StoreProductBody\n            Categories={Categories}\n            addToCart={this.addToCart}\n          />\n          <StoreHeader\n            showCategories={this.showCategories}\n            showCart={this.showCart}\n          />\n        </React.Fragment>\n      )\n    }\n  }\n}\n\nexport default Store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Store from './Store'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store \n    className = 'store'/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}